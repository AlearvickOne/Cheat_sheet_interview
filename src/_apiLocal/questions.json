{
  "html": [
    {
      "title": "Какой тег используется для создания ссылки?",
      "text": "Для сознания ссылки используется тег <a>"
    },
    {
      "title": "Какой тег используется для вставки изображения?",
      "text": "Для сознания ссылки используется тег <img>"
    },
    {
      "title": "Какой тег находится в <html> определяет заголовок документа?",
      "text": "Заголовок документа определяется с помощью тега <title>"
    },
    {
      "title": "Какой атрибут используется для определения альтернативного текста изображения?",
      "text": "Для альтернативного текса изображения используется атрибут - alt"
    },
    {
      "title": "Какой атрибут позволяет открыть ссылку в новой вкладке?",
      "text": "Для открытия новой вкладки используется атрибут - target=_blank"
    },
    {
      "title": "Для чего используется атрибут 'placeholder'?",
      "text": "Атрибут 'placeholder' используется для отображения текстовой подсказки или примера ввода в поле формы до того, как пользователь начнет вводить свои данные."
    },
    {
      "title": "Как создать непронумерованный список в HTML?",
      "text": "Для создания такого списка в HTML используется тег <code>ul</code>, а для определения каждого пункта списка - тег <code>li</code>."
    },
    {
      "title": "Что такое HTML?",
      "text": "HTML (HyperText Markup Language) - это стандартизированный язык разметки, который используется для создания и разработки веб-страниц. Это система для разметки отдельных частей веб-страницы с использованием тегов, заключенных в угловые скобки."
    },
    {
      "title": "Что делает тег <!DOCTYPE>?",
      "text": "`Это декларация, которая информирует веб-браузер о версии языка разметки, использованной при создании веб-страницы. Это помогает браузеру корректно отобразить страницу."
    },
    {
      "title": "Какой тег используется для создания таблицы?",
      "text": "Для создания таблицы в html используется тег <table>"
    },
    {
      "title": "Какой тег используется для создания заголовка таблицы?",

      "text": "Для создания заголовка таблицы используется тег <thead>"
    },
    {
      "title": "Какой тег используется для создания строки таблицы?",
      "text": "Для создания строки таблицы используется тег <tr>"
    },
    {
      "title": "Какой тег используется для создания ячейки таблицы?",
      "text": "Для создания ячейки таблицы используется тег <td>"
    },
    {
      "title": "Что такое семантические теги в HTML?",
      "text": "Семантические теги в HTML - это теги, которые передают информацию о смысле или назначении содержимого, а не только о его внешнем виде. Примеры семантических тегов: header, footer, article, section, nav и др. Они помогают создавать более структурированные и доступные веб-страницы."
    },
    {
      "title": "Какой атрибут используется для установки фонового изображения?",
      "text": "Для установки фонового изображения используется атрибут - background-image"
    },
    {
      "title": "Какой тег используется для создания выпадающего списка?",
      "text": "Для создания выпадающего списка используется тег <select>"
    },
    {
      "title": "Какой тег используется для вставки JavaScript кода в HTML документ?",
      "text": "Для вставки JS кода используется тег <script>"
    },
    {
      "title": "Какой атрибут используется для указания пути к изображению?",
      "text": "Для создания пути к изображению используется атрибут - src"
    },
    {
      "title": "Что делает атрибут 'readonly' в элементе формы?",
      "text": "Атрибут 'readonly' делает элемент формы только для чтения, что значит, что пользователь не может изменять значение элемента, но может просматривать его. Это может быть полезно, если вы хотите отобразить информацию, которая не должна быть изменена."
    },
    {
      "title": "Что такое веб-стандарты и зачем они нужны?",
      "text": "Веб-стандарты - это рекомендации, разработанные группами стандартов, такими как W3C или WHATWG, для обеспечения совместимости и устойчивости веб-технологий. Они включают рекомендации по HTML, CSS, JavaScript и другим веб-технологиям. Соблюдение веб-стандартов помогает обеспечить корректную работу веб-страниц в различных браузерах и устройствах, а также облегчить обслуживание и расширение веб-сайтов в будущем."
    },
    {
      "title": "Что такое отзывчивый (responsive) веб-дизайн?",
      "text": "Это подход к веб-дизайну, который позволяет веб-страницам корректно отображаться и функционировать на различных устройствах, включая мобильные телефоны, планшеты и настольные компьютеры, путем использования гибких макетов, гибких изображений и CSS медиазапросов для адаптации дизайна к различным размерам экрана и характеристикам устройств."
    },
    {
      "title": "Какой тег HTML используется для вставки видео?",
      "text": "Для вставки видео используется тег <video>"
    },
    {
      "title": "Какой тег используется для создания главного заголовка на веб-странице?",
      "text": "Для создания главного заголовка используется тег <h1>"
    },
    {
      "title": "Что делает тег <br>?",
      "text": "Он спользуется для переноса строки, что позволяет создать новую строку в том месте, где он размещен. Это удобный способ управления расположением текста на веб-странице без использования дополнительных стилей или элементов."
    },
    {
      "title": "Какой тег используется для создания упорядоченного списка?",
      "text": "Для создания упорядоченного списка используется тег <ol>"
    },
    {
      "title": "Что такое DOM в контексте веб-разработки?",
      "text": "DOM (Document Object Model) - это программный интерфейс для веб-документов. Это представление структурированного документа в виде объектной модели, которое позволяет программам и скриптам взаимодействовать с содержимым, структурой и стилями веб-страницы. DOM представляет документ как дерево объектов, каждый из которых соответствует части страницы."
    },
    {
      "title": "Какой атрибут используется для определения стилей элемента на странице?",
      "text": "Для определение стилей используется атрибут - style"
    },
    {
      "title": "Что такое атрибут 'alt' в теге <img>?",
      "text": "Он используется для предоставления альтернативного текста, который будет отображаться в случае, если изображение не может быть загружено. Это также может быть полезно для обеспечения доступности, поскольку скрин-ридеры могут использовать этот текст для описания изображения пользователям с ограниченными возможностями."
    }
  ],
  "css": [
    {
      "title": "В чем разница между «сбросом» и «нормализацией» CSS? Что бы вы выбрали и почему?",
      "text": "Сброс (reset) сбрасывает все встроенные в браузер стили элементов. Normalize приводит стили к единому виду во всех браузерах. Лучше использовать Normalize из-за кроссбраузерности."
    },
    {
      "title": "Что такое специфичность селекторов CSS и как она работает?",
      "text": "Специфичность селектора (еще называют весом) это свойство определяющее приоритет стилевого правила, то есть то, какой стиль будет применен к HTML элементу в итоге. Например, используя какую-нибудь UI библиотеку, элементам этой библиотеки будут применены правила заданные авторами по умолчанию. При необходимости можно поменять стили на свои, «перебив» дефолтные более специфичным селектором.\n\nПодробнее тут: <a href='https://developer.mozilla.org/ru/docs/Web/CSS/Specificity' target='_blank'>Специфичность (MDN)</a>"
    },
    {
      "title": "Что такое CSS?",
      "text": "CSS (Cascading Style Sheets) - это язык стилей, используемый для описания внешнего вида и форматирования документа, написанного на языке разметки, таком как HTML. CSS позволяет разработчикам управлять макетом, шрифтами, цветами и другими стилистическими аспектами веб-страницы."
    },
    {
      "title": "Почему, как правило, лучше разместить подключение CSS в <head>, а <script> перед тэгом </body>? Знаете ли вы какие-либо исключения, приведите примеры?",
      "text": "Стили рекомендуется подключать в head для того, чтобы страница как можно быстрее приняла свой внешний вид. Скрипты подключенные в head могут затормозить этот процесс, в связи с этим их рекомендуется подключать перед закрывающим тегом body. Исключением являются скрипты аналитики, для определения количества посетителей, которые не дождались загрузки страницы. В этом случае скрипт должен быть подключен в head."
    },
    {
      "title": "Что делает свойство 'z-index' в CSS?",
      "text": "Свойство 'z-index' в CSS контролирует стековый порядок элементов по оси Z. Элемент с большим значением 'z-index' будет отображаться поверх элемента с меньшим значением 'z-index'."
    },
    {
      "title": "Какие есть способы отцентровать div?",
      "text": "Существует несколько способов отцентровать div в CSS, вот некоторые из них: \n1. Использование свойств margin и auto: `margin: 0 auto;`.\n2. Использование Flexbox: `display: flex; justify-content: center; align-items: center;`.\n3. Использование Grid Layout: `display: grid; place-items: center;`.\n4. Использование свойств text-align и inline-block: `text-align: center;` на родительском элементе и `display: inline-block;` на самом div.`."
    },
    {
      "title": "Какое свойство используется для установки цвета фона?",
      "text": "Для установки цвета фона используется свойство - background-color"
    },
    {
      "title": "Какое свойство позволяет установить внешние отступы элемента?",
      "text": "Для установки внешних отсупов элемента используется свойство - margin"
    },
    {
      "title": "Какое свойство используется для установки шрифта?",
      "text": "Для установки шрифта используется свойство - font-family"
    },
    {
      "title": "Какое свойство CSS позволяет контролировать видимость элемента в DOM, но при этом сохраняет его место?",
      "text": "Для контроля видимости элемента используется свойство - visibility: hidden"
    },
    {
      "title": "Какое свойство CSS используется для установки теней элементов?",
      "text": "Для установки теней элементов используется свойство - box-shadow"
    },
    {
      "title": "Какой селектор выбирает все элементы .child, которые являются непосредственными дочерними элементами .parent?",
      "text": "Для этого используется селектор - .parent > .child"
    },
    {
      "title": "Какой селектор CSS выбирает все элементы, которые имеют указанный атрибут, начинающийся с определенной строки?",
      "text": "Для выбора всех элементов с необходимым атрибутом, начинающимся с определенной строки используется селектор - [attr^=value]"
    },
    {
      "title": "Какой селектор CSS выбирает все элементы, которые имеют указанный атрибут, заканчивающийся определенной строкой?",
      "text": "Для выбора всех элементов с необходимым атрибутом, заканчивающимся определенной строкой используется селектор - [attr$=value]"
    }
  ],
  "js": [
    {
      "title": "Что такое чистая функция?",
      "text": "Это функция, которая возвращает одинаковый результат, когда вызывается с одним и тем же набором аргументов, а также не имеет побочных эффектов (side effects)"
    },
    {
      "title": "Что такое замыкание?",
      "text": "Замыкания – это способность функции запоминать лексическое окружение, в котором она была создана, то есть хранить в себе ссылку на это окружение и обращаться к нему.\n\n<a href='https://youtu.be/mI6Jcfsgma4?si=46DV3mXPF6mDTTPs' target='_blank'>Подробнейшее видео про замыкание</a>"
    },
    {
      "title": "let VS const: почему лучше использовать const, когда это возможно?",
      "text": "Использование const дает два преимущества:\n1) Безопасность: объявление переменных через const защищает от неожиданного изменения значения переменной в коде, что может часто приводит к ошибкам и неожиданному поведению программы.\n2) Читаемость: использование const позволяет читателю кода понимать, что значение переменной не будет изменяться в течение выполнения программы. Это делает код более понятным и уменьшает возможность ошибок.\n\nПодробнее: <a href='https://youtu.be/07FllcTRj84?si=q7v60ZvHYBoRSSen' target='_blank'>Видео про VAR/LET/CONST</a>"
    },
    {
      "title": "Что такое промисы (Promises) в JavaScript?",
      "text": "Промисы – это объекты, которые представляют результат асинхронной операции. Они могут находиться в одном из трех состояний: ожидание (pending), выполнено (fulfilled) или отклонено (rejected)."
    },
    {
      "title": "Что такое деструктуризация в JavaScript?",
      "text": "Деструктуризация позволяет извлекать отдельные свойства из объектов или элементы из массивов и присваивать их переменным в более удобной форме. Например, вот так мы можем одной строкой извлечь имя и адрес пользователя из объекта user:\n<code>const {name, address} = user;</code>"
    },
    {
      "title": "Что такое стрелочные функции в JavaScript?",
      "text": "Стрелочные функции — это синтаксически компактный способ записи функций в JavaScript, который не имеет своего собственного 'this'. Они часто используются для создания анонимных функций.\n\n<a href='https://youtu.be/nGVYdna4kq4?si=1k0J9F-MYxWCaq6M' target='_blank'>Подробное видео про функции в JS</a>"
    },
    {
      "title": "Что такое hoisting в JavaScript?",
      "text": "Hoisting — это механизм в JavaScript, при котором переменные и объявления функций перемещаются на верх своей области видимости перед выполнением кода."
    },
    {
      "title": "Какой метод используется для добавления элемента в массив?",
      "text": "Для добавлениея элементов в массив используется метод - push()"
    },
    {
      "title": "Какой объект представляет текущее окно браузера?",
      "text": "Текущее окно браузеро предоставляет объект - window"
    },
    {
      "title": "Какой оператор используется для сравнения на строгое равенство?",
      "text": "Для строгого равенства используется оператор - === (Тройное равно)"
    },
    {
      "title": "Какой метод используется для удаления последнего элемента из массива?",
      "text": "Для удаления последнего элемента массива используется метод - pop()"
    },
    {
      "title": "Какой метод в JavaScript используется для преобразования объекта в строку JSON?",
      "text": "Для преобразавания объекта в строку испольуется медод - JSON.stringify()"
    },
    {
      "title": "Какой объект в JavaScript используется для работы с датой и временем?",
      "text": "Для работы с датой и временем используется объект - Date"
    },
    {
      "title": "Какой метод массива в JavaScript используется для фильтрации элементов по определенному критерию?",
      "text": "Для фильтрации элементов массива используется метод - filter()"
    }
  ],
  "react": [
    {
      "title": "Что такое React JS?",
      "text": "React JS, или просто React, это открытая библиотека JavaScript для создания пользовательских интерфейсов, особенно для одностраничных приложений (SPA). Ключевые особенности React:\n1) Компонентный подход: React строится на концепции компонентов, что позволяет разработчикам создавать легко переиспользуемые куски кода;\n2) Виртуальный DOM: React использует виртуальный DOM для отслеживания изменений. Это абстракция реального DOM, что позволяет библиотеке обновлять только те части интерфейса, которые действительно изменились, вместо полного перерендеринга страницы. Это делает React относительно быстрым;\n3) Хуки: Введение хуков позволило использовать состояния и другие возможности классовых компонентов в функциональных компонентах, что сделало код более кратким и чистым;\n4) Сообщество и экосистема: React имеет большое и активное сообщество разработчиков, а также много библиотек и инструментов, созданных сообществом, что облегчает разработку сложных приложений.\n\nПодробнее: <a href='https://youtu.be/R_39q-vdOaE?si=mEKDaYDjEdnojG-N' target='_blank'>Введение в React (видео)</a>"
    },
    {
      "title": "Для чего нужен атрибут key при рендере списков?",
      "text": "Ключи (keys) помогают React определять, какие элементы были изменены, добавлены или удалены. Их необходимо указывать, чтобы React мог сопоставлять элементы массива с течением времени. Лучший способ выбрать ключ — это использовать строку, которая будет явно отличать элемент списка от его соседей. Лучше всего вы будете использоваташих данных как ключи. Индексы массива тоже можно использовать для этого, но только если элементы массива не добавляются в начало, не переставляются и не удаляются."
    },
    {
      "title": "Как работает проп children?",
      "text": "Некоторые компоненты не знают своих потомков заранее. Это особенно характерно для таких компонентов, как Sidebar или Dialog, которые представляют из себя как бы «коробку», в которую можно что-то положить. Для таких компонентов можно использовать специальный проп children, который передаст дочерние элементы сразу на вывод.\n\nПодробнее: <a href='https://react.dev/learn/passing-props-to-a-component#passing-jsx-as-children' target='_blank'>Документация React (eng)</a>"
    },
    {
      "title": "Что такое порталы в React?",
      "text": "Порталы позволяют рендерить дочерние элементы в DOM-узел, который находится вне DOM-иерархии родительского компонента. Типовой случай применения порталов — когда в родительском компоненте заданы стили overflow: hidden или z-index, но вам нужно, чтобы дочерний элемент визуально выходил за рамки своего контейнера. Чаще всего, это диалоговые окна, всплывающие карточки и всплывающие подсказки."
    },
    {
      "title": "Что такое Reconciliation (Cверка)?",
      "text": "Это процесс, посредством которого React обновляет DOM. Когда состояние компонента изменяется, React должен рассчитать необходимость обновления DOM. Это делается путем создания виртуального DOM и сравнения его с текущим DOM. В этом контексте виртуальный DOM будет содержать новое состояние компонента."
    },
    {
      "title": "Для чего используется хук useEffect в React?",
      "text": "Хук useEffect используется для выполнения побочных эффектов из функционального компонента"
    },
    {
      "title": "Что будет, если вторым аргументом в useEffect передать пустой массив []?",
      "text": "Если передать вторым аргументов пустой массив, тогда useEffect будет запущен 1 раз"
    },
    {
      "title": "Какой хук используется для создания состояния в компоненте?",
      "text": "Для создания состояния используется хук - useState"
    },
    {
      "title": "Какой элемент используется для группировки элементов без добавления дополнительных узлов в DOM?",
      "text": "Для группировки элементов без добаления дополнительных тегов используется <Fragment> (<>)"
    },
    {
      "title": "У нас есть массив со строками (arr), каждую из которых мы хотим отразить на странице. Какой метод массива нужно применить в return компонента?",
      "text": "Для обработки массива используется метод {arr.map(...)}"
    },
    {
      "title": "Какой элемент используется для обработки ошибок в дереве компонентов?",
      "text": "Для обработки ошибов в дереве компонентов используется элемент - ErrorBoundary"
    },
    {
      "title": "Какой (какие) аргумент(ы) принимает хук useMemo?",
      "text": "useMemo принимает такие аргументы как функцию и массив зависимостей"
    },
    {
      "title": "Для чего используется хук useCallback в React?",
      "text": "useCallback используется для Мемоизации функций"
    }
  ],
  "restApiHttp": [
    {
      "title": "Что такое протокол передачи данных? Протокол HTTP - Hyper Text Transfer Protocol",
      "text": "Протокол передачи данных - это набор соглашений, которые определяют обмен данными между различными программами. Эти соглашения задают единообразный способ передачи сообщений и обработки ошибок."
    },
    {
      "title": "Как работает HTTP",
      "text": "Когда мы вводим в браузере поисковой запрос или url, на сервер отправляется GET запрос на указанный сервер. \n Например если это поиск Яндекс, то отправка идет на сервер этого поиска. Затем сервер после получения запроса, отвечает браузеру HTTP-ответом, который содержит HTML и уже после получения, браузер отображает HTML-код на экране в виде страницы.  \n  Так же если необходимо отправить данные при заполнении какой нибудь формы, то отправляется POST запрос. "
    },
    {
      "title": "Что такое API",
      "text": "API - является своего рода интерфейсом, набором функций. Который позволяет системе ответить, какие операции она выполняет. API включает в себя саму операцию, необходиму для выполнения, данные на входе и данные на выходе. \n API можно группировать по функционалу, а можно не группировать и сделать одно общее. \n Вызвать API можно как напрямую, так и косвенно: \n Напрямую:  \n 1. Система вызывает функции внутри себя. \n 2. Система вызывет метод другой системы. \n 3. Пользователь вызывает метод. \n 4. Автотесты дергают метод. \n Косвенно: \n 1. Пользователь работает с GUI."
    },
    {
      "title": "Какие выды общения API бывают?",
      "text": "Remote API - когда происходит общение по сети (HTTP и т.д) \n Local API - когда программа общается сама с собой или другими программами в одной вируальной памяти."
    },
    {
      "title": "Что такое REST",
      "text": "REST означает REpresentational State Transfer (передача репрезантативного состояния). Это набор согласованных правил и ограничений, для написания серверного приложения, для того, что бы все системы легко обменивались данными и приложение было легкомаштабируемым. "
    },
    {
      "title": "Какие ограничения выполняются?",
      "text": "В данном подходе все ограничения должны обязательно выполняться кроме (кода по требованию). Если кроме него не выполняются еще ограничения, то это уже не REST подход. "
    },
    {
      "title": "Является ли REST протоколом передачи данных?",
      "text": "REST не является протоколом передачи данных, это скорее всего парадигма. Он не определяет правила о том, как передавать запросы, их структуру и возвращение ошибок. Единственно необходимо содержать информацию, можно ли получанный ответ кешировать."
    },
    {
      "title": "REST - HTTP одно и тоже?",
      "text": "REST не является HTTP, но они очень тесно взаимносвязаны."
    },
    {
      "title": "Сколько принципов (ограничений) содержит REST?",
      "text": "REST содержит шесть принципов \n 1. Клиент-серверная архитектура. \n 2. Stateless. \n 3. Кеширование. \n 4. Единообразие интерфейса. HATEOAS \n 5. Layered system \n 6. Code on done (optional)"
    },
    {
      "title": "Клиент-серверная архитектура.",
      "text": "Клиент-серверная архитектура позволяет хранить все данные на сервере: \n 1. У данной архитектуры есть маштабируемость. Можно использовать не один сервер, и подключить достаточно большое количество клиентов. \n 2. Так-же все изменения будут происходит на сервере. \n 3. Но есть и минусы, если отказал сервер, и нет дополнительных инстансов, то это означает неработоспособность системы. Так-же может увеличиться нагрузка на сервер."
    },
    {
      "title": "Stateless",
      "text": " Stateless - принцип, который заключается в том, что сервер не должен хранить у себя информацию о сессии с клиентом. Он должен в каждом запросе получать всю информацию для обработки в отличии от принципа Stateful. \n 1. Данный принцип позволяет маштабировать сервер, уменьшить время обработки запроса, он понятен и прост, так-же есть возможность использования кеширования."
    },
    {
      "title": "Кеширование",
      "text": "Кеширование - при первом обращении сервер перед отправкой клиенту ответа, сохраняет полученную информацию в кеш. Для того, что бы при повторном запросе, сервер не обращался к базе, а просто взял сохраненные данные и отправил их клиенту. Что уменьшает нагрузку на сервер и ускоряет получение данных."
    },
    {
      "title": "HATEOAS Единообразие интерфейса.",
      "text": "Ограничение REST, согласно которому сервер возвращает не только ресурс, но и его связи с другими ресурсами и действия, которые можно с ним совершить. Получая такие ответы, клиент сам решает как распоряжаться полученной информацией. Что дает гибкость в плане изменений на сервере с точки зрения допустимых действий. Однако это дает сильное усложнение логики клиента, что может повлиять на логику сервера, потому что такие ответы нужно правильно формировать."
    },
    {
      "title": "Layered system (слоистая архитектура)",
      "text": "Layered system (слоистая архитектура) - Концепция слоистой архитектуры. \n Заключается в том, что ни клиент, ни сервер, не должны знать о том, как происходит цепочка вызовов дальше своих прямых соседей. Например, если идет балансировщик, за ним proxy, а спереди уже сервер. То, то что было раньше proxy, балансировщику не известно.\n Если изменяется поведение proxy-сервера, то это не должно повлечь изменения для клиентского приложения или сервера.\n Однако с таким подходом увеличивается нагрузка на сеть, что способствует увеличению времени получения ответа."
    },
    {
      "title": "Code on done (Код по требованию)",
      "text": "Позволяет внести изменения на сервере, например цвет объекта при клике на него с помощью кода, а затем передать клиенту результат."
    }
  ],
  "cors": [
    {
      "title": "Что такое CORS",
      "text": "Это механизм, который позволяет выполняемым скриптам в браузере взаимодействовать с ресурсами, имеющими разный origin, а именно разные ссылки, по сравнению с ссылкой, где выполняется изначальный запрос."
    },
    {
      "title": "На какие виды ресурсов реагирует CORS?",
      "text": "Разный домен (vk.com и ok.ru), Разный протокол (http и https), Разный порт (3000 и 3001)"
    },
    {
      "title": "Как реагирует CORS?",
      "text": "Если передать запрос со своего сайта на тот, где cors не был настроен. То выдасть ошибку - (Access-Control-Allow-Origin), которая говорит о не правильном заголовке и не пропустит запрос."
    },
    {
      "title": "Что было до CORS?",
      "text": " До механизма CORS было невозможно совершить запрос между разными доменами, так как это было связано с безопасностью."
    },
    {
      "title": "Как настроить CORS? - 1",
      "text": "Для этого необходимо на стороне бэкенда конфигурировать такие заголовки, как  * Access-Control-Allow-Origin - который позволяет указать те домены, с которых можно высылать запрос. { * - все домены, что не безопасно. * - или же указать свои.}"
    },
    {
      "title": "Как настроить CORS? - 2",
      "text": "* Access-Control-Allow-Credentials - который позволяет при значении 'true' использовать куки при аутентификации."
    },
    {
      "title": "Как настроить CORS? - 3",
      "text": "* Access-Control-Allow-Methods - указывает, каким http-методам дозволено совершить запрос. GET, POST, PUT, DELETE."
    },
    {
      "title": "На какие типы запрсов делится CORS?",
      "text": "CORS делит запросы на 2 типы: простые и preflight"
    },
    {
      "title": "Простые запросы CORS",
      "text": "Простые запросы. * Методы GET, POST, или HEAD * При использовании заголовка Content-Type должны быть такие значения: application/x-www-[form-urlencoded] или multipart/form-data или text/plain"
    },
    {
      "title": "Все остальные запросы CORS будут являться Preflight.",
      "text": "Если запрос не является простым, то браузер автоматически пошлет preflight запрос с методом OPTION, цель которого разузнать возможности CORS-сервера, куда идет запрос и если сервер вернет заголовки, то браузер пошлет еще запрос за данными, которые требуются."
    }
  ]
}
